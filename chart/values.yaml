# Default values for project-origin-stamp.

# image defines the image configuration for the stamp server
image:

  # repository defines the image repository to use
  repository: ghcr.io/project-origin/stamp

  # tag defines the image tag to use, defaults to the chart appVersion
  tag:

# service holds the configuration for the service
service:
  # type is the type of service to create, allowed values are (ClusterIP | NodePort | LoadBalancer)
  type: ClusterIP
  # nodePort is the port to expose the service on if type is NodePort
  nodePort:

securityContext:
  # runAsUser defines the user to run the container as, defaults to 1654
  runAsUser: 1000
  # runAsNonRoot defines if the container should be run as a non-root user, defaults to true
  runAsNonRoot: true
  # allowPrivilegeEscalation defines if privilege escalation is allowed, defaults to false
  allowPrivilegeEscalation: false
  # readOnlyRootFilesystem defines if the root filesystem should be read-only, defaults to true
  readOnlyRootFilesystem: true
  # seccompProfile defines the seccomp profile to use, defaults to RuntimeDefault
  seccompProfile:
    type: RuntimeDefault
  # capabilities defines the capabilities to drop from the container, defaults to dropping all capabilities
  capabilities:
    drop: ["ALL"]

initContainers:
  securityContext:
    # runAsUser defines the user to run the init container as, defaults to 1654
    runAsUser: 1000
    # runAsNonRoot defines if the init container should be run as a non-root user, defaults to true
    runAsNonRoot: true
    # allowPrivilegeEscalation defines if privilege escalation is allowed, defaults to false
    allowPrivilegeEscalation: false
    # readOnlyRootFilesystem defines if the root filesystem should be read-only, defaults to true
    readOnlyRootFilesystem: true
    # seccompProfile defines the seccomp profile to use, defaults to RuntimeDefault
    seccompProfile:
      type: RuntimeDefault
    # capabilities defines the capabilities to drop from the init container, defaults to dropping all capabilities
    capabilities:
      drop: ["ALL"]

# config holds general configuration for the stamp server
config:

  # pathBase defines the base part of all paths in the api of the stamp server, defaults to /api
  pathBase: /api

# otlp holds the configuration for the opentelemetry collector
otlp:
  # enabled determines if the opentelemetry collector is enabled
  enabled: false
  # endpoint defines the endpoint of the opentelemetry collector, example "http://otel-collector:4317"
  endpoint: "http://opentelemetry-collector.otel-collector:4317"

messageBroker:
  # type defines the type of message broker to use, allowed values are (inMemory | rabbitmq | rabbitmqOperator)
  type:

  # rabbitmq defines the rabbitmq configuration for the message broker if type is rabbitmq, with rabbitmqOperator or inMemory this is ignored
  rabbitmq:
    # host defines the host of the rabbitmq server in url format 'http://localhost:15672/'
    host:
    # port defines the port of the rabbitmq server, defaults to 5672
    port: 5672
    # username defines the username to use to connect to the rabbitmq server
    username:
    # password defines the password to use to connect to the rabbitmq server
    password:

  retry:
    # number of times Stamp consumers retrys messages on errors with a 3 minute incrementing interval.
    defaultFirstLevelRetryCount: 5
    # number of times the registry is polled for transaction status before giving up with interval specified below.
    registryTransactionStillProcessingRetryCount: 5
    # intitial interval in seconds for the registry to retry for the transaction status.
    registryTransactionStillProcessingInitialIntervalSeconds: 60
    # increment interval in seconds for the registry to retry for the transaction status.
    registryTransactionStillProcessingIntervalIncrementSeconds: 60

# stamp defines the deployment configuration for the stamp server
stamp:
  # replicas defines the number of stamp server instances to run
  replicaCount: 3

 # Registries is a list of all the known registries in the network
registries: []
  # example
  # - name: test
  #   address: http://test-registry:80

 # List issuer private keys
issuerPrivateKeyPems: []
  # example
  # - gridArea: narnia
  #   key: 1234567890

# postgresql holds the configuration for the postgresql database, each value is required and can be set directly, via a secretRef, or via a configMapRef
postgresql:
  # host defines the host of the postgresql database
  host:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # port defines the port of the postgresql database
  port:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # database defines the name of the postgresql database
  database:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # username defines the username to use to connect to the postgresql database
  username:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # password defines the password to use to connect to the postgresql database
  password:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # maxPoolSize defines the maximum connection pool size pr replica
  maxPoolSize: 30

job:
  securityContext:
  # runAsUser defines the user to run the job as, defaults to 1654
  runAsUser: 1654
  # runAsNonRoot defines if the job should be run as a non-root user, defaults to true
  runAsNonRoot: true
  # allowPrivilegeEscalation defines if privilege escalation is allowed, defaults to false
  allowPrivilegeEscalation: false
  # readOnlyRootFilesystem defines if the root filesystem should be read-only, defaults to true
  readOnlyRootFilesystem: true
  # seccompProfile defines the seccomp profile to use, defaults to RuntimeDefault
  seccompProfile:
    type: RuntimeDefault
  # capabilities defines the capabilities to drop from the container, defaults to dropping all capabilities
  capabilities:
    drop: ["ALL"]